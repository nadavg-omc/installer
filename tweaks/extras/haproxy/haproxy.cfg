# Global definitions apply to entire load balancer
global

	# Basic system configuration
	log /dev/log	local0
	log /dev/log	local1 notice
	chroot /var/lib/haproxy
	stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners
	stats timeout 30s
	user haproxy
	group haproxy
	daemon

	# Default SSL material locations
	ca-base CERTS_PATH_PLACEHOLDER
	crt-base CERTS_PATH_PLACEHOLDER

	# SSL options taken from: https://ssl-config.mozilla.org/#server=haproxy&server-version=1.9.8 
	ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
	ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
	ssl-default-bind-options no-sslv3 no-tlsv10 no-tlsv11 no-tls-tickets
	ssl-default-server-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
	ssl-default-server-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
	ssl-default-server-options no-sslv3 no-tlsv10 no-tlsv11 no-tls-tickets
	tune.ssl.default-dh-param 2048

# Defaults will be used in all cases unless overridden by specific frontend/backend definitions
defaults

	# Listen exclusively to http connections
	mode	http

	# Basic logging
	log	global
	log-format frontend:%f/%H/%fi:%fp\ client:%ci:%cp\ GMT:%T\ body:%[capture.req.hdr(0)]\ request:%r
	option dontlognull
	option log-separate-errors
	option dontlog-normal
	
	# Default connection timeouts (in milliseconds by default, other options detailed in docs)
    timeout connect 5000
    timeout client  50000ms
    timeout server  50s

	# Error files to display on common http errors
	errorfile 400 /etc/haproxy/errors/400.http
	errorfile 403 /etc/haproxy/errors/403.http
	errorfile 408 /etc/haproxy/errors/408.http
	errorfile 500 /etc/haproxy/errors/500.http
	errorfile 502 /etc/haproxy/errors/502.http
	errorfile 503 /etc/haproxy/errors/503.http
	errorfile 504 /etc/haproxy/errors/504.http

# Web ui to see HAProxy stats
frontend stats

    # Access ui through uncommmon port with ssl certificate
	#  (certificates location is defined above in crt-base)
	bind *:8404 ssl crt CERT_GENERATED_NAME

	# Enable stats ui for this frontend
	stats enable
    # Access ui through this path 
	stats uri /stats
	# Refresh stats
	stats refresh 10s
    # Lock ui with username and password 
	stats auth USERPASS_PLACEHOLDER
    # Hide version of haproxy from ui
	stats hide-version

# Frontend that accepts requests from clients
frontend mysite_incoming

	# Listen exclusively to http connections
	mode http

	# Accept standard http requests to any ip address
	bind *:80
	# Accept standard https requests with ssl certificate
	#	(certificate example with full path)
	bind *:443 ssl crt CERTS_PATH_PLACEHOLDER/CERT_GENERATED_NAME
	# Redirect http requests to https 
	http-request redirect scheme https unless { ssl_fc }

	# Use this backend as default for all requests
	default_backend mysite_outgoing
	# For specfic requests, use a different backend (example)
	#use_backend mysite_api if { path_beg /api/ }

	# Leave connection idle on both sides between the end of response and start of new request
	option http-keep-alive
	# Add x-forwarded header when needed
	option forwardfor
	# Compress common text-based requests
	compression algo gzip
	compression type text/css text/html text/javascript application/javascript text/plain text/xml application/json

# Servers that fulfill the requests
backend mysite_outgoing

	# Load balancing will direct to the least connected server in pool
	balance leastconn
	# Set cookie to persist client-server connection
	#cookie SERVERUSED insert indirect nocache
	# Perform efficient GET http request checks before passing data
	option httpchk HEAD /
	# Add x-forwarded header when needed
	option forwardfor
	# If a server is down, pass the request to other servers in pool
	option redispatch
	# Log health checks for more accurate information on fails
	option log-health-checks
	# Perform health checks every second, report fail|rise after 3|5 consecutive checks
	default-server inter 1s fall 3 rise 5
	# Only accept status 200 as valid
	http-check expect status 200

	# Send ssl requests to servers below 
	#  (uncomment cookie option for better session persistence)
	server web1 10.0.0.1:443 check ssl verify none maxconn 1000 cookie web1
	server web2 10.0.0.2:443 check ssl verify none maxconn 1000 cookie web2
